package com.example.chat_toolbar;import static android.hardware.biometrics.BiometricManager.Authenticators.BIOMETRIC_STRONG;import static android.hardware.biometrics.BiometricManager.Authenticators.DEVICE_CREDENTIAL;import android.app.ProgressDialog;import android.content.Intent;import android.content.SharedPreferences;import android.os.Bundle;import android.provider.Settings;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import androidx.biometric.BiometricManager;import androidx.biometric.BiometricPrompt;import androidx.core.content.ContextCompat;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.android.material.textfield.TextInputEditText;import com.google.firebase.auth.AuthResult;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import java.util.concurrent.Executor;public class LoginActivity extends AppCompatActivity {    TextInputEditText email , password;    TextView biometricLoginButton;    private Executor executor;    private BiometricPrompt biometricPrompt;    private BiometricPrompt.PromptInfo promptInfo;    Button btn_login;    FirebaseAuth auth;    FirebaseUser user;    ProgressDialog progressDialog;    SharedPreferences sharedPreferences;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activtiy_login);        Toolbar toolbar = findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setTitle("Login");        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        auth = FirebaseAuth.getInstance();        user= auth.getCurrentUser();        progressDialog = new ProgressDialog(this);        email=findViewById(R.id.email);        password=findViewById(R.id.password);        btn_login=findViewById(R.id.btn_login);        biometricLoginButton = findViewById(R.id.biometric_login);        btn_login.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String txt_email = email.getText().toString();                String txt_password = password.getText().toString();                if (TextUtils.isEmpty(txt_email) || TextUtils.isEmpty(txt_password)) {                    Toast.makeText(LoginActivity.this, "All fields are required", Toast.LENGTH_SHORT).show();                } else {                    PerformAuth(txt_email, txt_password);                }            }        });        sharedPreferences=getSharedPreferences("data",MODE_PRIVATE);        boolean isLogin=sharedPreferences.getBoolean("isLogin",false);        if(isLogin)        {            biometricLoginButton.setVisibility(View.VISIBLE);        }        BiometricManager biometricManager = BiometricManager.from(this);        switch (biometricManager.canAuthenticate(BiometricManager.Authenticators.BIOMETRIC_STRONG | BiometricManager.Authenticators.DEVICE_CREDENTIAL)){            case BiometricManager.BIOMETRIC_SUCCESS:                Log.d("MY_APP_TAG", "App can authenticate using biometrics.");                break;            case BiometricManager.BIOMETRIC_ERROR_NO_HARDWARE:                Toast.makeText(LoginActivity.this, "Fingerprint sensor Not exist", Toast.LENGTH_SHORT).show();                break;            case BiometricManager.BIOMETRIC_ERROR_HW_UNAVAILABLE:                Toast.makeText(LoginActivity.this, "Sensor not available or busy", Toast.LENGTH_SHORT).show();                break;            case  BiometricManager.BIOMETRIC_ERROR_NONE_ENROLLED:                final Intent enrollIntent = new Intent(Settings.ACTION_BIOMETRIC_ENROLL);                enrollIntent.putExtra(Settings.EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWED,                        BIOMETRIC_STRONG | DEVICE_CREDENTIAL);                break;        }        executor = ContextCompat.getMainExecutor(this);        biometricPrompt = new BiometricPrompt(LoginActivity.this,                executor, new BiometricPrompt.AuthenticationCallback() {         /*   @Override            public void onAuthenticationError(int errorCode,                                              @NonNull CharSequence errString) {                super.onAuthenticationError(errorCode, errString);                Toast.makeText(getApplicationContext(),                        "Authentication error: " + errString, Toast.LENGTH_SHORT)                        .show();            }*/            @Override            public void onAuthenticationSucceeded(                    @NonNull BiometricPrompt.AuthenticationResult result) {                super.onAuthenticationSucceeded(result);                String txt_email =sharedPreferences.getString("email","");                String txt_password = sharedPreferences.getString("password","");                PerformAuth(txt_email,txt_password);            }            @Override            public void onAuthenticationFailed() {                super.onAuthenticationFailed();                Toast.makeText(getApplicationContext(), "Authentication failed",                        Toast.LENGTH_SHORT)                        .show();            }        });        promptInfo = new BiometricPrompt.PromptInfo.Builder()                .setTitle("Biometric login for my app")                .setSubtitle("Log in using your biometric credential")                .setNegativeButtonText("Use account password")                .build();        biometricLoginButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                biometricPrompt.authenticate(promptInfo);            }        });    }    private void PerformAuth(String txt_email, String txt_password) {        progressDialog.setMessage("In progress...");        progressDialog.show();        auth.signInWithEmailAndPassword(txt_email, txt_password).addOnCompleteListener(new OnCompleteListener<AuthResult>() {            @Override            public void onComplete(@NonNull Task<AuthResult> task) {                if (task.isSuccessful())                {                    SharedPreferences.Editor editor = getSharedPreferences("data",MODE_PRIVATE).edit();                    editor.putString("email", txt_email);                    editor.putString("password", txt_password);                    editor.putBoolean("isLogin",true);                    editor.apply();                    Intent intent = new Intent(LoginActivity.this , MainActivity2.class);                    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);                    startActivity(intent);                    finish();                    progressDialog.dismiss();                    Toast.makeText(LoginActivity.this, "Login Successful", Toast.LENGTH_SHORT).show();                }                else                {                    progressDialog.dismiss();                    Toast.makeText(LoginActivity.this, "Invalid email or password.", Toast.LENGTH_SHORT).show();                }            }        });    }}